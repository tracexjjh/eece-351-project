import socket
import sys
import sqlite3
import bcrypt
import json
import threading
import base64

def get_db_connection():
    try:
        db = sqlite3.connect('AUBoutique.db', check_same_thread=False)
        cursor = db.cursor()
        return db, cursor
    except sqlite3.Error as error:
        print("Connection error with database:",error)
        return None,None

def create_tables():
    db, cursor = get_db_connection()
    if db is None or cursor is None:
        print ("Table creation failed due to database connection error")
        return 
    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                username TEXT PRIMARY KEY,
                name TEXT NOT NULL,
                email TEXT NOT NULL,
                password TEXT NOT NULL
            )
        """)
        db.commit()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS products (
                name TEXT PRIMARY KEY,
                picture BLOB,
                price REAL,
                description TEXT,
                owner TEXT NOT NULL,
                buyer TEXT,
                FOREIGN KEY (owner) REFERENCES users(username)
            )
        """)
        db.commit()
    except sqlite3.Error as error:
        print ("Error creating the table: ", error)
    finally:
        db.close()

online_users = {}

def send_response(conn, response):
    try:
        conn.sendall(json.dumps(response).encode("utf-8"))
    except (ConnectionResetError, BrokenPipeError) as error:
        print("Error sending the response",error)
        conn.close()

def register(conn, user_data):
    db, cursor = get_db_connection()
    username = user_data['username']
    cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
    if cursor.fetchone():
        send_response(conn, {"message": "Username already exists."})
        return
    else:
        cursor.execute("INSERT INTO users (username, name, email,password) VALUES (?, ?, ?, ?, ?)",
                       (username, user_data['name'], user_data['email'],user_data['password']))
        db.commit()
        send_response(conn, {"message": "Registration successful!"})


def login_user(data):
    db, cursor = get_db_connection()
    try:
        # Retrieve the password hash from the database for the given username
        cursor.execute("SELECT password FROM login_info WHERE username = ?", (data["username"],))
        result = cursor.fetchone()
        
        if result:
            # Decode the stored password hash from Base64 back to bytes if needed
            stored_password_hash = base64.b64decode(result[0])

            # Check the password sent by the client against the stored hash
            if bcrypt.checkpw(data["password"].encode('utf-8'), stored_password_hash):
                return {"status": "success", "message": "Logged in successfully!"}
            else:
                return {"status": "error", "message": "Invalid credentials"}
        else:
            return {"status": "error", "message": "Invalid credentials"}
    finally:
        db.close()



def view_products(connection):
    db, cursor = get_db_connection()
    cursor.execute("SELECT name, picture, price, description, owner FROM products WHERE buyer IS NULL")
    products = cursor.fetchall()
    
    product_list = [{"name": product[0], "picture": product[1], "price": product[2], "description": product[3], "owner": product[4]} for product in products]
    response = {"response": "Products fetched successfully", "products": product_list}
    send_response(connection, response)  # Correctly pass the connection
    db.close()

def view_products_by_owner(conn, owner):
    db, cursor = get_db_connection()
    cursor.execute("""
        SELECT name, price, description, picture
        FROM products 
        WHERE owner = ? AND buyer IS NULL
    """, (owner,))
    
    products = cursor.fetchall()  
    product_list = [{"name": product[0], "price": product[1], "description": product[2], "picture": product[3]} for product in products]
    response = {"response": "Products fetched successfully", "products": product_list}
    send_response(conn, response)  # Correctly send response
    db.close()

def add_product(conn, product_data):
    db, cursor = get_db_connection()
    try:
        cursor.execute("""
            INSERT INTO products (name, description, price, picture, owner, buyer) 
            VALUES (?, ?, ?, ?, ?, NULL)
        """, (product_data['name'], product_data['description'], product_data['price'], product_data['picture'], product_data['owner']))
        db.commit()
        response = {"message": "Product added successfully!"}
    except sqlite3.IntegrityError:
        response = {"message": "Product already exists."}
    except Exception as e:
        response = {"message": f"An error occurred: {str(e)}"}
    finally:
        send_response(conn, response)
        db.close()

def buy_product(conn, username, product_name):
    db, cursor = get_db_connection()
    cursor.execute("SELECT * FROM products WHERE name = ? AND buyer IS NULL", (product_name,))
    product = cursor.fetchone()
    if product:
        cursor.execute("UPDATE products SET buyer = ? WHERE name = ?", (username, product_name))
        db.commit()
        send_response(conn, {"message": f"Product '{product_name}' bought successfully! Please collect your bought products from the AUB Post Office by next week!"})
    else:
        send_response(conn, {"message": "Product not available."})
    db.close()

def check_owner_status(conn, command_data):
    owner = command_data['owner']
    if owner in online_users:
        response = {"message": f"{owner} is online."}
    else:
        response = {"message": f"{owner} is offline."}
    send_response(conn, response)

def initiate_chat(conn, command_data):
    owner = command_data["owner"]
    message = command_data["message"]

    if owner in online_users:
        owner_conn = online_users[owner]
        chat_message = {"from": command_data["username"], "message": message}
        owner_conn.sendall(json.dumps(chat_message).encode("utf-8"))
        response = {"response": "Message sent."}
    else:
        response = {"response": f"{owner} is not online."}
    
    send_response(conn, response)

def receive_messages(conn):
    while True:
        try:
            message = conn.recv(1024).decode()
            if not message:
                break  # Exit if no message is received
            chat_message = json.loads(message)
            print(f"{chat_message['from']}: {chat_message['message']}")
        except Exception as e:
            print(f"Connection lost. Error: {e}")
            break  
def handle_logout(conn):
    conn.sendall(json.dumps({"message": "Logout successful"}).encode("utf-8"))

    
def handle_client(conn):
    username = None
    try:
        conn.settimeout(10)  # Timeout for receiving data to handle unresponsive clients
        while True:
            try:
                message = conn.recv(1024).decode()
                if not message:
                    print(f'{username if username else "A client"} has disconnected.')
                    break
                
                # Parse JSON data
                try:
                    command_data = json.loads(message)
                except json.JSONDecodeError:
                    print("Received malformed JSON. Skipping this message.")
                    send_response(conn, {"response": "Invalid JSON format."})
                    continue

                # Extract and process the action
                action = command_data.get("action")
                if action == "register":
                    register(conn, command_data)
                elif action == "login":
                    username = login(conn)
                    if username:
                        online_users[username] = conn
                elif action == "check_online":
                    check_owner_status(conn, command_data)
                elif action == "initiate_chat":
                    initiate_chat(conn, command_data)
                elif action == "buy_product":
                    buy_product(conn, username, command_data)
                elif action == "add_product":
                    add_product(conn, command_data)
                elif action == "view_products_by_owner":
                    view_products_by_owner(conn, command_data)
                else:
                    print(f"Unknown action received: {action}")
                    send_response(conn, {"response": "Unknown action."})
            except socket.timeout:
                print(f"Client {username if username else 'unknown'} timed out.")
                break
    finally:
        if username in online_users:
            del online_users[username]
            print(f"Connection closed for {username}.")
        conn.close()

if __name__ == "__main__":
    create_tables()
    if len(sys.argv) != 2:
        print("Usage: python server.py <port>")
        sys.exit(1)

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', int(sys.argv[1])))
    server.listen(5)
    print("Server is listening...")

    while True:
        try:
            conn, addr = server.accept()
            print(f"Connection from {addr} accepted.")
            threading.Thread(target=handle_client, args=(conn,)).start()
        except KeyboardInterrupt:
            print("\nServer is shutting down...")
            server.close()
            break
