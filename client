

import socket
import json

localhost= "127.0.0.1"
portnumber=9091

clientsocket= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket.connect((localhost, portnumber))

def register():
    name= input ("Enter name: ")
    email= input("Enter email: ")
    address= input("Enter address: ")
    username=input ("Enter username: ")
    password= input("Enter password: ")
    data1= {
        "action":"register",
        "name": name,
        "email": email,
        "address":address,
        "username": username,
        "password": password
    }
    clientsocket.sendall(json.dumps(data1).encode("utf-8"))
    response=clientsocket.recv(1024).decode()
    print(response)
    
def login():
    username = input("enter username: ")
    password= input("enter password: ")
    data2= {
        "action":"login",
        "username": username,
        "password": password
    }
    clientsocket.sendall(json.dumps(data2).encode("utf-8"))
    response=clientsocket.recv(1024).decode()
    print(response)
    
        
def viewproducts():
    data = {"action": "viewbuyers"}
    clientsocket.sendall(json.dumps(data).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    products = json.loads(response)
    print("Available products: ")
    for product in products:
        print(f"Name: {product['name']}, Price: {product['price']}, Description: {product['description']}")

def addproduct():
    name=input("Enter product name: ")
    description=input("Enter product description: ")
    price=input("Enter product price: ")

    data3 = {
        'action':'addproduct',
        'name':name,
        'description':description,
        'price':price
    }
    clientsocket.send(json.dumps(data3).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    print(response)
   
def checkownerstatus():
    ownername=input("enter owner name: ")
    data4 ={
        'action':'checkownerstatus',
        'ownername':ownername
    }
    clientsocket.send(json.dumps(data4).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    print(response)

clientsocket.close()

def buyproduct():
    productname=input("Enter the product name you want to buy: ")
    data5={
        "action":"buyproduct",
        "productname":productname
        }
    clientsocket.send(json.dumps(data5).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    print(response)
    
def sendmessage():
    recipient=input("Enter the recipient's username: ")
    message=input("Enter the message: ")
    data6={
        "action":"sendingmessage",
        "recipient":recipient,
        "message:":message
        }
        
    clientsocket.send(json.dumps(data6).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    print(response)
    
def online():
    ownername=input("Enter the owner's username to check if they are online: ")
    data7={
        "action": "checkownerstatus",
        "ownername": ownername
    }
    clientsocket.send(json.dumps(data7).encode("utf-8"))
    response = clientsocket.recv(1024).decode()
    print(response)

def main():
    while True:
        action = input("Do you want to register (r), login (l), or exit (e)? ").lower()
        if action == 'r':
            register()
        elif action == 'l':
            if login():
                while True:
                    option = input("Options: view products (v), add product (a), buy product (b), send message (m), check owner status (c), or logout (o): ").lower()
                    if option == 'v':
                        viewproducts()
                    elif option == 'a':
                        addproduct()
                    elif option == 'b':
                        buyproduct()
                    elif option == 'm':
                        sendmessage()
                    elif option == 'c':
                        online()
                    elif option == 'o':
                        print("Logging out...")
                        break
                    else:
                        print("Invalid option. Please try again.")
        elif action=='e':
            print("Exiting...")
            break
        else:
            print("Invalid input. Please try again.")
    clientsocket.close()

if __name__ == "__main__":
    main()

clientsocket.close()

