import socket
import json
import os
import base64
import threading
import time
from prettytable import PrettyTable

server_domain = "127.0.0.1"
server_port = 6421

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def connect():
    try:
        client_socket.connect((server_domain, server_port))
        print("Connected successfully.")
    except socket.error as e:
        print(f"Connection failed: {e}")
        exit()

def send_request(data):
    try:
        client_socket.sendall(json.dumps(data).encode("utf-8"))
        response = client_socket.recv(4096).decode("utf-8")
        if response:
            return json.loads(response)
        else:
            print("Empty response from server.")
            return {"status": "error", "message": "No response from server"}
    except (ConnectionError, json.JSONDecodeError) as e:
        print(f"An error occurred: {e}")
        return {"status": "error", "message": str(e)}

def password_check(password):
    special_symbols = ['$', '@', '#', '%']
    while True:
        if len(password) < 8:
            print("Password should be at least 8 characters.")
        elif not any(char.isdigit() for char in password):
            print("Password should contain at least one numeral.")
        elif not any(char.isupper() for char in password):
            print("Password should contain at least one uppercase letter.")
        elif not any(char.islower() for char in password):
            print("Password should contain at least one lowercase letter.")
        elif not any(char in special_symbols for char in password):
            print("Password should contain at least one special symbol: $@#%")
        elif password[0] in special_symbols:
            print("Password should not start with a special character.")
        else:
            print("Password meets the requirements.")
            return password
        password = input("Enter a valid password: ")

def register():
    while True:
        try:
            name = input("Enter your full name (name and family name): ")
            if len(name.split()) != 2:
                print("Please enter your full name.")
                continue
            email = input("Enter your email: ")
            if '@' not in email or '.' not in email.split('@')[-1]:
                print("Invalid email format. Please try again.")
                continue
            username = input("Enter your username: ")
            password = input("Enter your password (at least 8 characters,with one numeral, at least one upper case, at least one special symbol but not at the beginning): ")
            password = password_check(password)

            data = {
                "action": "REGISTER",
                "name": name,
                "email": email,
                "username": username,
                "password": password
            }
            response = send_request(data)
            print(response["message"])
            return response["status"] == "success", username

        except Exception as e:
            print(f"An error occurred: {e}")

def login():
    MAX_ATTEMPTS = 3
    attempts = 0
    blocktime = 180  # Lockout time in seconds

    while attempts < MAX_ATTEMPTS:
        username = input("Enter username: ")
        password = input("Enter password: ")

        data = {
            "action": "LOGIN",
            "username": username,
            "password": password
        }
        response = send_request(data)
        print(response.get("message", "An unexpected error occurred."))

        if response.get("status") == "success":
            print("Welcome to AUBoutique!")
            return True, username
        elif "Incorrect password" in response.get("message", ""):
            attempts += 1
        elif "Account locked" in response.get("message", ""):
            print(f"Please wait for {blocktime / 60} minutes before trying again.")
            time.sleep(blocktime)
            return False, None
        else:
            break

        if attempts >= MAX_ATTEMPTS:
            print("You've reached the maximum number of attempts. Please try again later.")
            return False, None
    return False, None

def view_products():
    data = {"action": "VIEW_PRODUCTS"}
    response = send_request(data)
    if response["status"] == "success":
        table = PrettyTable(["Product Name", "Picture", "Price", "Description", "Owner"])
        for product in response.get("products", []):
            table.add_row([product["name"], product['picture'], product["price"], product["description"], product["owner"]])
        print("\nProducts for Sale:")
        print(table)
    else:
        print(response["message"])

def view_products_by_owner():
    owner = input("Enter the owner's username: ")
    data = {"action": "VIEW_PRODUCTS_BY_OWNER", "owner": owner}
    response = send_request(data)
    if response["status"] == "success":
        table = PrettyTable(["Product Name", "Picture" ,"Price", "Description"])
        for product in response.get("products", []):
            table.add_row([product["name"], product["picture"], product["price"], product["description"]])
        print(f"\nProducts by {owner}:")
        print(table)
    else:
        print(response["message"])

def check_owner_status():
    owner = input("Enter the owner's username: ")
    data = {"action": "CHECK_OWNER_STATUS", "owner": owner}
    response = send_request(data)
    if response["status"] == "success":
        print(f"{owner} is {response['status']}.")
    else:
        print(response["message"])

def add_product(username):
    product_name = input("Enter product name: ")
    picture=input("Enter image path: ")
    
    if not os.path.isfile(picture):
        print("Image file does not exist.")
        return

    with open(picture, 'rb') as f:
        image_data = f.read()
        image_base64 = base64.b64encode(image_data).decode('utf-8')
        
    price = input("Enter product price: ")

    try:
        price = float(price)
        if price <= 0:
            print("Price must be greater than zero.")
            return
    except ValueError:
        print("Invalid price. Please enter a number.")
        return

    description = input("Enter product description: ")

    data = {
        "action": "ADD_PRODUCT",
        "name": product_name,
        "picture": image_base64,
        "price": price,
        "description": description,
        "owner": username
    }
    response = send_request(data)
    print(response["message"])

def buy_product(username):
    product_name = input("Enter the product name to buy: ")
    data = {"action": "BUY_PRODUCT", "product_name": product_name, "username": username}
    response = send_request(data)
    print(response["message"])

def view_buyers(username):
    data = {"action": "VIEW_BUYERS", "owner": username}
    response = send_request(data)
    if response["status"] == "success":
        table = PrettyTable(["Product Name", "Buyer"])
        for item in response.get("buyers", []):
            table.add_row([item["product_name"], item["buyer"]])
        print(f"\nBuyers of products owned by {username}:")
        print(table)
    else:
        print(response["message"])

def receive_messages():
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                message_data = json.loads(message)
                print(f"{message_data['from']}: {message_data['message']}")
            else:
                break
        except json.JSONDecodeError:
            print("Received non-JSON data.")
        except ConnectionResetError:
            print("Connection lost.")
        except KeyboardInterrupt:
            print("Chat interrupted by user.")
        except Exception as e:
            print(f"An error occurred: {e}")
        except (ConnectionResetError, ConnectionAbortedError):
            print("Recipient disconnected. Exiting chat.")
            break


def chat_with_owner(username):
    owner = input("Enter the owner's username to start chat: ")
    data = {"action": "CHECK_OWNER_STATUS", "owner": owner}
    response = send_request(data)
    
    if response.get("status") == "offline":
        print(f"{owner} is currently offline. Please try again later.")
        return

    print(f"Starting a chat with {owner}. Type 'exit' to end the chat.")
    threading.Thread(target=receive_messages, daemon=True).start()
    
    while True:
        message = input("You: ")
        if message.lower() == 'exit':
            break
        chat_data = {"action": "CHAT", "from": username, "to": owner, "message": message}
        send_request(chat_data)

def logout(username):
    data = {"action": "LOGOUT", "username": username}
    response = send_request(data)
    
    print(response["message"])
    client_socket.close()

def main():
    connect()
    while True:
        choice = input("\nChoose: [r]egister, [l]ogin, [q]uit: ").lower()
        if choice == "r":
            success, username = register()
            if success:
                print("Please login to continue.")
                success, username = login()
        elif choice == "l":
            success, username = login()
        if success:
                while True:
                    print("\n1. View Products")
                    print("2. View Products by Owner")
                    print("3. Check Owner Status")
                    print("4. Add Product")
                    print("5. Buy Product")
                    print("6. View Buyers")
                    print("7. Initiate Chat")
                    print("8. Chat with Owner")
                    print("9. Log Out")
                    
                    action = input("Choose an option: ")
                    if action == "1":
                        view_products()
                    elif action == "2":
                        view_products_by_owner()
                    elif action == "3":
                        check_owner_status()
                    elif action == "4":
                        add_product(username)
                    elif action == "5":
                        buy_product(username)
                    elif action == "6":
                        view_buyers(username)
                    elif action == "7":
                        chat_with_owner(username)
                    elif action == "8":
                        chat_with_owner(username)
                    elif action == "9":
                        logout(username)
                        return
                    else:
                        print("Invalid choice. Try again.")
        elif choice == "q":
            print("Exiting.")
            client_socket.close()
            break
        else:
            print("Invalid choice. Choose [r], [l], or [q].")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting the application")
    finally:
        client_socket.close()
