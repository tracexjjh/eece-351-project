import socket
import sys
import bcrypt
import json
import os
import base64
import threading
from prettytable import PrettyTable

server_domain = "127.0.0.1"
server_port = 8787

client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

def connect():
    try:
        client_socket.connect((server_domain, server_port))
        print("Connected successfully.")
    except socket.error as e:
        print(f"Connection failed: {e}")

def send_request(data):
    try:
        client_socket.sendall(json.dumps(data).encode("utf-8"))
        response = json.loads(client_socket.recv(1024).decode("utf-8"))
        return response
    except json.JSONDecodeError:
        print("Failed to decode server response.")
        return {}
    except Exception as e:
        print(f"Error during request: {e}")
        return {}

def password_check(passwd):
    SpecialSym = ['$', '@', '#', '%']
    if len(passwd) < 6:
        print('Length should be at least 6.')
        return False
    if not any(char.isdigit() for char in passwd):
        print('Password should have at least one numeral.')
        return False
    if not any(char.isupper() for char in passwd):
        print('Password should have at least one uppercase letter.')
        return False
    if not any(char.islower() for char in passwd):
        print('Password should have at least one lowercase letter.')
        return False
    if not any(char in SpecialSym for char in passwd):
        print('Password should have at least one of the symbols $@#.')
        return False
    return True

def register():
    name = input("Enter name: ")
    email = input("Enter email: ")
    if '@' not in email or '.' not in email.split('@')[-1]:
        print("Invalid email format.")
        return
    address = input("Enter your address: ")
    username = input("Enter username: ")
    password = input("Enter your password (at least 6 characters, at least one numeral, "
                     "one uppercase letter, one lowercase letter, and one of the symbols $@#): ")

    if not password_check(password):
        return

    try:
        password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    except Exception as e:
        print(f"Error in hashing password: {e}")
        return
    
    data = {
        "action": "register",
        "name": name,
        "email": email,
        "address": address,
        "username": username,
        "password": password_hash.decode()
    }
    
    response = send_request(data)
    print(response.get("response", "Registration successful."))

def login():
    username = input("Enter username: ")
    password = input("Enter password: ")

    data = {
        "action": "login",
        "username": username,
        "password": password
    }
    response = send_request(data)
    if response.get("response") == "Logged in successfully!":
        print("You are logged in!")
        display_products(response.get("products", []))
        homepage()  # Directly go to homepage after login
    else:
        print(response.get("response", "Login failed."))

def display_products(products):
    if products:
        table = PrettyTable(["Product Name", "Price ($)", "Description", "Image", "Owner"])
        for product in products:
            table.add_row([product['name'], product['price'], product['description'], product['picture'], product['owner']])
        print("\nProducts for Sale:")
        print(table)
    else:
        print("No products available for sale.")

def view_products_by_owner():
    owner = input("Enter the owner's username to view their products: ")
    data = {"action": "view_products_by_owner", "owner": owner}
    
    response = send_request(data)
    products = response.get("products", [])
    
    if products:
        table = PrettyTable()
        table.field_names = ["Product Name", "Price (in $)", "Description", "Image", "Owner"]
        for product in products:
            table.add_row([product['name'], product['price'], product['description'], product['picture'], product['owner']])
        print(f"Products from {owner}:")
        print(table)
    else:
        print(f"No products found for owner {owner}.")

def check_owner_status():
    owner = input("Enter the owner's username to check their online status: ")
    data = {"action": "check_owner_status", "owner": owner}
    
    response = send_request(data)
    if "message" in response:
        print(response["message"])
    else:
        print("Error checking owner status.")

def add_product():
    name = input("Enter product name: ")
    if not name:
        print("Product name cannot be empty.")
        return

    description = input("Enter product description: ")
    if not description:
        print("Product description cannot be empty.")
        return

    price = input("Enter product price: ")
    try:
        price = float(price)
        if price <= 0:
            print("Price must be greater than zero.")
            return
    except ValueError:
        print("Invalid price. Please enter a number.")
        return

    image_path = input("Enter image path: ")
    if os.path.isfile(image_path):
        with open(image_path, 'rb') as f:
            image_data = f.read()
            image_base64 = base64.b64encode(image_data).decode()
    else:
        print("Image file does not exist.")
        return

    data = {
        "action": "add_product",
        "name": name,
        "description": description,
        "price": price,
        "image": image_base64
    }

    response = send_request(data)
    print(response.get("message", "Succesfully added product."))

def receive_messages():
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                message_data = json.loads(message)
                print(f"{message_data['from']}: {message_data['message']}")
            else:
                break
        except ConnectionResetError:
            print("Connection lost.")
            break
        except Exception as e:
            print(f'An error occurred: {e}')
            break

def chat_with_owner(owner):
    print(f"Starting a chat with {owner}. Type 'exit' to end the chat.")
    threading.Thread(target=receive_messages, daemon=True).start()
    
    while True:
        message = input("You: ")
        if message.lower() == 'exit':
            break
        data = {
            "action": "chat",
            "owner": owner,
            "message": message
        }
        response = send_request(data)
        print(f"Response from {owner}: {response.get('response', 'No response.')}")



def buy_product():
    product_name = input("Enter the product name to buy: ")
    data = {"action": "buy_product", "product_name": product_name}
    response = send_request(data)
    print(response.get("message", "Failed to buy product."))

def view_buyers():
    username = input("Enter your username to view buyers: ")
    data = {"action": "view_buyers", "username": username}
    response = send_request(data)
    
    buyers = response.get("buyers", [])
    if buyers:
        print("Buyers of your products:")
        for buyer in buyers:
            print(buyer)
    else:
        print("No buyers found.")

def logout():
    client_socket.sendall(json.dumps({"action": "logout"}).encode('utf-8'))
    response = client_socket.recv(1024).decode('utf-8')
    print(response)
    client_socket.close()

def homepage():
    while True:
        data={"action":"view_products_by_owner", "owner": "any_user"}
        response=send_request(data)
        products=json.loads(response).get("products", [])
        
        print("\n---- Homepage -----")
        if not products:
            print("No products available. You have to add a product before continuing")
            print("1. Add a product")
            choice=input("Choose an option: ")
            if choice=="1":
                add_product()
            else:
                print("Invalid choice. Please add a product to continue")
        
        else:
            print("1. Product owner online?")
            print("2. Add a Product")
            print("3. View Products by Owner")
            print("5. Select and buy products")
            print("6. view buyers")
            print("4. Log Out")
        
            choice = input("Choose an option: ")
            if choice=="1":
                check_owner_status()
            if choice == "2":
                add_product()
            elif choice == "3":
                view_products_by_owner()
            elif choice == "4":
                print("Logging out...")
                break
            else:
                print("Invalid choice. Please try again.")

def main():
    connect()
    while True:
        choice = input("\nChoose: [r]egister, [l]ogin: ").lower()
        if choice == 'r':
            register()
        elif choice == 'l':
            login()
        else:
            print("Invalid choice. Please choose [r] or [l].")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("Exiting the application.")
    finally:
        client_socket.close()
