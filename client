import sys
import socket
import os
import base64
import requests
from PyQt5 import QtWidgets, QtGui, QtCore
from PyQt5.QtWidgets import QMessageBox, QTableWidget, QTableWidgetItem, QVBoxLayout, QHBoxLayout, QPushButton, QLabel, QLineEdit, QFormLayout, QHeaderView

# Server details
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 1791

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect((SERVER_HOST, SERVER_PORT))

class AUBoutiqueApp(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('AUBoutique')
        self.setGeometry(200, 200, 800, 600)
        self.initUI()

    def initUI(self):
        self.layout = QVBoxLayout()
        
        self.title = QLabel('AUBoutique')
        self.title.setFont(QtGui.QFont('Arial', 24))
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.layout.addWidget(self.title)

        self.register_button = QPushButton('Register')
        self.register_button.setStyleSheet("background-color: lightblue")
        self.register_button.clicked.connect(self.register)

        self.login_button = QPushButton('Login')
        self.login_button.setStyleSheet("background-color: lightgreen")
        self.login_button.clicked.connect(self.login)

        self.layout.addWidget(self.register_button)
        self.layout.addWidget(self.login_button)

        self.setLayout(self.layout)

    def register(self):
        self.register_window = RegisterWindow()
        self.register_window.show()

    def login(self):
        self.login_window = LoginWindow()
        self.login_window.show()

class RegisterWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Register')
        self.setGeometry(150, 150, 300, 200)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()
        
        self.name_input = QLineEdit()
        self.email_input = QLineEdit()
        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)

        layout.addRow('Name:', self.name_input)
        layout.addRow('Email:', self.email_input)
        layout.addRow('Username:', self.username_input)
        layout.addRow('Password:', self.password_input)

        self.submit_button = QPushButton('Register')
        self.submit_button.setStyleSheet("background-color: lightblue")
        self.submit_button.clicked.connect(self.submit_registration)

        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def submit_registration(self):
        name = self.name_input.text()
        email = self.email_input.text()
        username = self.username_input.text()
        password = self.password_input.text()

        if len(name.split()) != 2:
            QMessageBox.warning(self, 'Error', 'Please enter both first and last names.')
            return

        if '@' not in email or '.' not in email.split('@')[-1]:
            QMessageBox.warning(self, 'Error', 'Invalid email format.')
            return

        if not self.password_check(password):
            QMessageBox.warning(self, 'Error', 'Password must be at least 8 characters long, contain a number, an uppercase letter, a lowercase letter, and a special symbol.')
            return

        message=(f"REGISTER|{name}|{email}|{username}|{password}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        QMessageBox.information(self, 'Info', response)

    def password_check(self, passwd):
        SpecialSym = ['$', '@', '#', '%']
        if len(passwd) < 6:
            return False
        if not any(char.isdigit() for char in passwd):
            return False
        if not any(char.isupper() for char in passwd):
            return False
        if not any(char.islower() for char in passwd):
            return False
        if not any(char in SpecialSym for char in passwd):
            return False
        return True

class LoginWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Login')
        self.setGeometry(150, 150, 300, 200)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()
        
        self.username_input = QLineEdit()
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)

        layout.addRow('Username:', self.username_input)
        layout.addRow('Password:', self.password_input)

        self.submit_button = QPushButton('Login')
        self.submit_button.setStyleSheet("background-color: lightgreen")
        self.submit_button.clicked.connect(self.submit_login)

        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def submit_login(self):
        username = self.username_input.text()
        password = self.password_input.text()
        
        message=(f"LOGIN|{username}|{password}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        
        if response == "Login successful":
            QMessageBox.information(self, 'Info', 'Welcome to AUBoutique!')
            self.main_menu(username)
        else:
            QMessageBox.warning(self, 'Error', response)

    def main_menu(self, username):
        self.menu_window = MainMenuWindow(username)
        self.menu_window.show()
        self.close()

class MainMenuWindow(QtWidgets.QWidget):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setWindowTitle('Main Menu')
        self.setGeometry(200, 200, 600, 400)
        self.initUI()

    def initUI(self):
        self.layout = QVBoxLayout()

        self.title = QLabel('Main Menu')
        self.title.setFont(QtGui.QFont('Arial', 20))
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.layout.addWidget(self.title)

        self.view_products_button = QPushButton('View Products')
        self.view_products_button.setStyleSheet("background-color: lightpink")
        self.view_products_button.clicked.connect(self.view_products)

        self.add_product_button = QPushButton('Add Product')
        self.add_product_button.setStyleSheet("background-color: lightcoral")
        self.add_product_button.clicked.connect(self.add_product)
        

        self.message_user_button = QPushButton('Message User')
        self.message_user_button.setStyleSheet("background-color: lightpink")
        self.message_user_button.clicked.connect(self.message_user)

        self.buy_product_button = QPushButton('Buy Product')
        self.buy_product_button.setStyleSheet("background-color: lightcoral")
        self.buy_product_button.clicked.connect(self.buy_product)

        self.check_online_button = QPushButton('Check if User is Online')
        self.check_online_button.setStyleSheet("background-color: lightpink")
        self.check_online_button.clicked.connect(self.check_if_user_online)

        self.view_wishlist_button = QPushButton('View Wishlist')
        self.view_wishlist_button.setStyleSheet("background-color: lightpink")
        self.view_wishlist_button.clicked.connect(self.view_wishlist)

        self.add_to_wishlist_button = QPushButton('Add to Wishlist')
        self.add_to_wishlist_button.setStyleSheet("background-color: lightcoral")
        self.add_to_wishlist_button.clicked.connect(self.add_to_wishlist)

        self.logout_button = QPushButton('Logout')
        self.logout_button.setStyleSheet("background-color: lightcoral")
        self.logout_button.clicked.connect(self.logout)

        self.search_product_button = QPushButton('Search for product')
        self.search_product_button.setStyleSheet("background-color: lightpink")
        self.search_product_button.clicked.connect(self.logout)
        
        self.view_buyers_button = QPushButton('View buyers')
        self.view_buyers_button.setStyleSheet("background-color: lightcoral")
        self.view_buyers_button.clicked.connect(self.logout)

        self.layout.addWidget(self.view_products_button)
        self.layout.addWidget(self.add_product_button)
        self.layout.addWidget(self.message_user_button)
        self.layout.addWidget(self.buy_product_button)
        self.layout.addWidget(self.check_online_button)
        self.layout.addWidget(self.logout_button)
        self.layout.addWidget(self.view_wishlist_button)
        self.layout.addWidget(self.add_to_wishlist_button)
        self.layout.addWidget(self.search_product_button)
        self.layout.addWidget(self.view_buyers_button)

        self.setLayout(self.layout)

    
    def view_products(self):
        self.view_buyers_window = ViewBuyersWindow() 
        self.view_buyers_window.show()

    def search_products(self): 
        self.search_window = SearchProductsWindow() 
        self.search_window.show()

    def add_product(self):
        self.add_product_window = AddProductWindow(self.username)
        self.add_product_window.show()

    def message_user(self):
        pass  # Implement messaging in peer-to-peer fashion

    def buy_product(self):
        self.buy_product_window = BuyProductWindow(self.username)
        self.buy_product_window.show()

    def check_if_user_online(self):
        self.online_window = OnlineWindow()
        self.online_window.show()
        
    def view_wishlist(self):
        self.view_wishlist_window = ViewWishlistWindow(self.username)
        self.view_wishlist_window.show()

    def add_to_wishlist(self):
        user_id = self.get_user_id(self.username)
        product_id, ok = QtWidgets.QInputDialog.getText(self, 'Input', 'Enter Product ID:')
        if ok and product_id:
            message=(f"ADD_TO_WISHLIST|{user_id}|{product_id}")
            client.send(message.encode('utf-8'))
            response = client.recv(4096).decode('utf-8')
            QMessageBox.information(self, 'Info', response)
                                                         
    def logout(self):
        message=(f"LOGOUT|{self.username}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        if response == "Logout successful":
            QMessageBox.information(self, 'Info', 'You have been logged out.')
            self.close()
        else:
            QMessageBox.warning(self, 'Error', 'Logout failed.')
            
        
class ViewBuyersWindow(QtWidgets.QWidget):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setWindowTitle('View Buyers')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.productname_input = QLineEdit()
        self.buyer_input = QLineEdit()
        self.purchasedate_input = QLineEdit()
        self.description_input = QLineEdit()
        self.quantity_input = QLineEdit()

        layout.addRow('Product name:', self.name_input)
        layout.addRow('Buyer name:', self.picture_input)
        layout.addRow('Purchase Date:', self.price_input)
        layout.addRow('Description:', self.description_input)
        layout.addRow('Quantity:', self.quantity_input)

        self.submit_button = QPushButton('View Buyers')
        self.submit_button.setStyleSheet("background-color: lightblue")
        self.submit_button.clicked.connect(self.submit_product)

        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def view_buyers(self):
        message=(f"VIEW_PURCHASES|{self.username}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        if response == "Owner not found":
            QMessageBox.warning(self, 'Error', response)
        elif response == "No purchases found": 
            QMessageBox.information(self, 'Info', response)
        self.close()
        
class ViewWishlistWindow(QtWidgets.QWidget):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setWindowTitle('View Wishlist')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.name_input = QLineEdit()
        self.picture_input = QLineEdit()
        self.price_input = QLineEdit()
        self.description_input = QLineEdit()
        self.quantity_input = QLineEdit()

        layout.addRow('Product name:', self.name_input)
        layout.addRow('Picture path:', self.picture_input)
        layout.addRow('Price:', self.price_input)
        layout.addRow('Description:', self.description_input)
        layout.addRow('Quantity:', self.quantity_input)

        self.submit_button = QPushButton('View Wishlist')
        self.submit_button.setStyleSheet("background-color: lightblue")
        self.submit_button.clicked.connect(self.submit_product)

        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def view_wishlist(self):

        message=("VIEW_WISHLIST|self.username")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        if response == "No items in wishlist":
            QMessageBox.information(self, 'Info', response)
        else:
            QMessageBox.information(self, 'Info', response)
        self.close()


class AddProductWindow(QtWidgets.QWidget):
    def __init__(self, username):
        super().__init__()
        self.username = username
        self.setWindowTitle('Add Product')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.name_input = QLineEdit()
        self.picture_input = QLineEdit()
        self.price_input = QLineEdit()
        self.description_input = QLineEdit()
        self.quantity_input = QLineEdit()

        layout.addRow('Product name:', self.name_input)
        layout.addRow('Picture path:', self.picture_input)
        layout.addRow('Price:', self.price_input)
        layout.addRow('Description:', self.description_input)
        layout.addRow('Quantity:', self.quantity_input)

        self.submit_button = QPushButton('Add Product')
        self.submit_button.setStyleSheet("background-color: lightblue")
        self.submit_button.clicked.connect(self.submit_product)

        layout.addWidget(self.submit_button)
        self.setLayout(layout)

    def submit_product(self):
        name = self.name_input.text()
        picture = self.picture_input.text()
        price = self.price_input.text()
        description = self.description_input.text()
        quantity = self.quantity_input.text()

        try:
            price = float(price)
        except ValueError:
            QMessageBox.warning(self, 'Error', 'Invalid price. Please enter a valid number.')
            return

        try:
            quantity = int(quantity)
        except ValueError:
            QMessageBox.warning(self, 'Error', 'Invalid quantity. Please enter a valid number.')
            return

        message=(f"ADD_PRODUCT|{name}|{picture}|{price}|{description}|{quantity}|{self.username}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        
        QMessageBox.information(self, 'Info', response)
        self.close()

class OnlineWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Check if User is Online')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.username_input = QLineEdit()
        layout.addRow('Username:', self.username_input)

        self.check_button = QPushButton('Check')
        self.check_button.setStyleSheet("background-color: lightblue")
        self.check_button.clicked.connect(self.check_online)

        layout.addWidget(self.check_button)
        self.setLayout(layout)

    def check_online(self):
        username = self.username_input.text()
        message=(f"IS_USER_ONLINE|{username}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        QMessageBox.information(self, 'Info', response)
        self.close()

class MessageUserWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Message User')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.recipient_input = QLineEdit()
        self.message_input = QLineEdit()
        self.sender_input = QLineEdit()

        layout.addRow('Recipient Username:', self.recipient_input)
        layout.addRow('Your Username:', self.sender_input)
        layout.addRow('Message:', self.message_input)

        self.send_button = QPushButton('Send')
        self.send_button.setStyleSheet("background-color: lightblue")
        self.send_button.clicked.connect(self.send_message)

        layout.addWidget(self.send_button)
        self.setLayout(layout)

    def send_message(self):
        recipient = self.recipient_input.text()
        message_text = self.message_input.text()
        sender_username = self.sender_input.text()

        message=(f"MESSAGE|{recipient}|{message_text}|{sender_username}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        QMessageBox.information(self, 'Info', response)
        self.close()

class BuyProductWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Buy Product')
        self.setGeometry(200, 200, 400, 300)
        self.initUI()

    def initUI(self):
        layout = QFormLayout()

        self.product_id_input = QLineEdit()
        self.quantity_input = QLineEdit()

        layout.addRow('Product ID:', self.product_id_input)
        layout.addRow('Quantity:', self.quantity_input)

        self.buy_button = QPushButton('Buy')
        self.buy_button.setStyleSheet("background-color: lightblue")
        self.buy_button.clicked.connect(self.buy_product)

        layout.addWidget(self.buy_button)
        self.setLayout(layout)

    def buy_product(self):
        product_id = self.product_id_input.text()
        quantity = self.quantity_input.text()

        try:
            product_id = int(product_id)
        except ValueError:
            QMessageBox.warning(self, 'Error', 'Invalid product ID. Please enter a valid number.')
            return

        try:
            quantity = int(quantity)
        except ValueError:
            QMessageBox.warning(self, 'Error', 'Invalid quantity. Please enter a valid number.')
            return

        message=(f"BUY_PRODUCT|{product_id}|{quantity}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        QMessageBox.information(self, 'Info', response)
        self.close()
    import socket

class SearchProductsWindow(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Search Products')
        self.setGeometry(200,200,400,300)
        self.initUI()

    def initUI(self):
        self.layout = QVBoxLayout()

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("Enter product name or description")
        self.layout.addWidget(self.search_input)

        self.search_button = QPushButton('Search')
        self.search_button.setStyleSheet("background-color: lightgreen")
        self.search_button.clicked.connect(self.perform_search)
        self.layout.addWidget(self.search_button)

        self.results_table = QTableWidget()
        self.results_table.setColumnCount(6)
        self.results_table.setHorizontalHeaderLabels(['Name', 'Price', 'Description', 'Picture', 'Owner', 'Quantity'])
        self.results_table.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.layout.addWidget(self.results_table)

        self.setLayout(self.layout)

    def perform_search(self):
        query = self.search_input.text()
        message=(f"SEARCH_PRODUCTS|{query}")
        client.send(message.encode('utf-8'))
        response = client.recv(4096).decode('utf-8')
        if response != "No products found":
            products = response.split('|')
            self.results_table.setRowCount(len(products))
            for row, product in enumerate(products):
                name, price, description, picture, owner, quantity = product.split(',')
                self.results_table.setItem(row, 0, QTableWidgetItem(name))
                self.results_table.setItem(row, 1, QTableWidgetItem(price))
                self.results_table.setItem(row, 2, QTableWidgetItem(description))
                self.results_table.setItem(row, 3, QTableWidgetItem(picture))
                self.results_table.setItem(row, 4, QTableWidgetItem(owner))
                self.results_table.setItem(row, 5, QTableWidgetItem(quantity))
        else:
            QMessageBox.information(self, 'Info', response)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    main_window = AUBoutiqueApp()
    main_window.show()
    sys.exit(app.exec_())
