
import socket 
import sqlite3
import threading

server_domain = '127.0.0.1' 
server_port = 9091
server_socket = socket.socket(socket.AF_INET , socket.SOCK_STREAM) 
server_socket.bind((server_domain, server_port))

server_socket.listen() 
print(f"Server is operating on {server_domain} : {server_port}")

while True : 
    client_socket,client_address = server_socket.accept() 
    print(f"Connection from {client_address}")

db = sqlite3.connect('auboutique.db',checksamethread=False) 
cursor = db.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS user_info (name TEXT NOT NULL, email TEXT NOT NULL, address TEXT NOT NULL, username TEXT PRIMARY KEY NOT NULL UNIQUE, password TEXT NOT NULL)")
cursor.execute("CREATE TABLE IF NOT EXISTS product_info (username TEXT NOT NULL, name TEXT NOT NULL, picture BLOB NOT NULL, price REAL NOT NULL, description TEXT NOT NULL, buyer TEXT NULL, PRIMARY KEY(username, name))")
db.commit()

def registration(data,conn):
    name = input("Enter name: ")
    email = input("Enter email: ")
    address = input("Enter address: ")
    
    checker = False
    while not checker:
        username = input("Enter username: ")
        cursor.execute("SELECT 1 FROM user_info WHERE username = ?", (username,))
        if cursor.fetchone() is None:
            checker = True
        else:
            print("Username already exists. Please try a different one.")
    password = input("Enter password: ")
    try:
        cursor.execute("INSERT INTO user_info VALUES (?, ?, ?, ?, ?)", 
                       (name, email, address, username, password))
        db.commit()
        print("Registration successful!")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
        db.rollback()
    
def login():
    checker = False
    while not checker:
        username = input("Enter username: ")
        cursor.execute("SELECT 1 FROM user_info WHERE username = ?", (username,))
        if cursor.fetchone() is None:  # If no result, username does not exist
            print("Username does not exist. Please try again.")
        else:
            checker = True
            anotherchecker = False
            while not anotherchecker:
                password = input("Enter password: ")
                cursor.execute("SELECT 1 FROM user_info WHERE username = ? AND password = ?", (username, password))
                if cursor.fetchone() is None:  # If no result, password does not match username
                    print("Password does not match username. Try again.")
                else:
                    anotherchecker = True
                    print("Logged in successfully!")
                    
def listproducts():
    cursor.execute("SELECT * FROM product_info WHERE buyer IS NULL")
    products=cursor.fetchall()
    print ("Available products:")
    for product in products:
        print(f"Name: {product[1]}, Price: {product[3]}, Description: {product[4]}")
    
def selectproducts():
    productsselected=[]
    name=input("Enter the product name you wish to buy: ")
    buyername=input("Enter your username: ")
    cursor.execute("SELECT * FROM product_info WHERE name=? AND BUYER IS NULL",(name,))
    product=cursor.fetchone()
    if product:
        productsselected.append(product)
        confirmationmessage="Congratulations on your purchase. Please collect it from the AUB Post Office in three days"
        print(confirmationmessage)
        cursor.execute("UPDATE product_info SET buyer=? WHERE name = ?", (buyername,product[1]))
        db.commit()
    else:
        print("Product is not available, please choose another one")
        
def addproducts():
    username=input("Enter your username: ")
    name=input("Enter product name: ")
    picture=input("Enter path to the product picture: ")
    price= float(input("Enter product price: "))
    description=input("Enter product description: ")
   
    try:
        cursor.execute("INSERT INTO product_info (username, name, picture, price, description) VALUES (?, ?, ?, ?, ?)", 
                       (username, name, picture, price, description))
        db.commit()
        print("Product added successfully!")
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")
        db.rollback()
        
def getseller(username):
    cursor.execute("SELECT name, buyer FROM product_info WHERE username=?", (username,))
    results=cursor.fetchall()
    return results

def getusername(conn):
    credentials = conn.recv(1024).decode("utf-8")
    action, username, password = credentials.split(":")
    if action == "login":
        cursor.execute("SELECT 1 FROM user_info WHERE username = ? AND password = ?", (username, password))
        if cursor.fetchone():
            conn.send("Login successful!".encode("utf-8"))
            return username 
        else:
            conn.send("Login failed.".encode("utf-8"))
            return None
    elif action == "register":
        try:
            cursor.execute("INSERT INTO user_info (name, email, address, username, password) VALUES (?, ?, ?, ?, ?)", 
                           (username, 'useremail@example.com', 'address', username, password))
            db.commit()
            conn.send("Registration successful!".encode("utf-8"))
            return username  
        except sqlite3.Error as e:
            conn.send(f"Registration failed: {e}".encode("utf-8"))
            return None
        
online_users = {}  
def handleclient(conn, addr):
    print(f"[NEW CONNECTION] {addr} connected.")
    connected = True
    username = getusername(conn)
    if username is None:
        conn.close()
        return
    online_users[username] = conn
    while connected:
        messagelength = conn.recv(64).decode("utf-8") 
        if messagelength:
            messagelength = int(messagelength)
            message = conn.recv(messagelength).decode("utf-8")
            if message == "!DISCONNECT":
                connected = False
            elif message.startswith("MESSAGE:"):
                _, recipient, actual_message = message.split(":", 2)
                if recipient in online_users:
                    recipient_conn = online_users[recipient]
                    recipient_conn.send(f"Message from {username}: {actual_message}".encode("utf-8"))
                else:
                    conn.send(f"{recipient} is not online.".encode("utf-8"))
            else:
                print(f"[{addr}] {message}")
                conn.send("Msg received".encode("utf-8"))
    conn.close()
    if username in online_users:
        del online_users[username]
    print(f"[CONNECTION CLOSED] {addr} disconnected.")
    
def start():
    server_socket.listen()
    print(f"[LISTENING] Server is listening on {server_socket}:{server_port}")
    
    while True:
        conn, addr = server_socket.accept()
        thread = threading.Thread(target=handleclient, args=(conn, addr))
        thread.start()
        print(f"[ACTIVE CONNECTIONS] {threading.activeCount() - 1}")
print("[STARTING] server is starting...")
start()
    
