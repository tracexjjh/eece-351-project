import socket
import threading
import sqlite3
import json
import bcrypt
import sys

# Database setup
def get_db_connection():
    db = sqlite3.connect('AUBoutique.db', check_same_thread=False)
    cursor = db.cursor()
    return db, cursor

def create_tables():
    db, cursor = get_db_connection()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            username TEXT PRIMARY KEY,
            name TEXT NOT NULL,
            email TEXT NOT NULL,
            address TEXT NOT NULL,
            password TEXT NOT NULL
        )
    """)
    db.commit()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            name TEXT PRIMARY KEY,
            description TEXT,
            price REAL,
            owner TEXT NOT NULL,
            buyer TEXT,
            FOREIGN KEY (owner) REFERENCES users(username)
        )
    """)
    db.commit()

create_tables()
online_users = {}

def handle_client(conn, addr):
    print(f"New connection from {addr}")
    conn_db, cursor = get_db_connection()

    def send_response(response):
        conn.send(json.dumps(response).encode('utf-8'))

    username = None  # To store the logged-in username

    while True:
        try:
            data = conn.recv(1024).decode('utf-8')
            if not data:
                break

            data = json.loads(data)
            action = data.get('action')

            if action == "REGISTER":
                username = data['username']
                cursor.execute("SELECT * FROM users WHERE username = ?", (username,))
                if cursor.fetchone():
                    send_response({"message": "Username already exists."})
                else:
                    password_hash = bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt())
                    cursor.execute(
                        "INSERT INTO users (username, name, email, address, password) VALUES (?, ?, ?, ?, ?)",
                        (username, data['name'], data['email'], data['address'], password_hash))
                    conn_db.commit()
                    send_response({"message": "Registration successful!"})

            elif action == "LOGIN":
                username = data['username']
                cursor.execute("SELECT password FROM users WHERE username = ?", (username,))
                result = cursor.fetchone()
                if result and bcrypt.checkpw(data['password'].encode('utf-8'), result[0]):
                    online_users[username] = conn
                    send_response({"message": "Login successful!"})
                else:
                    send_response({"message": "Invalid username or password."})

            elif action == "VIEW_PRODUCTS":
                cursor.execute("SELECT * FROM products WHERE buyer IS NULL")
                products = cursor.fetchall()
                product_list = [{"name": p[0], "description": p[1], "price": p[2], "owner": p[3]} for p in products]
                send_response({"products": product_list})

            elif action == "VIEW_PRODUCTS_BY_OWNER":
                owner = data['owner']
                cursor.execute("SELECT * FROM products WHERE owner = ? AND buyer IS NULL", (owner,))
                products = cursor.fetchall()
                product_list = [{"name": p[0], "description": p[1], "price": p[2]} for p in products]
                send_response({"products": product_list})

            elif action == "CHECK_OWNER_STATUS":
                owner = data['owner']
                if owner in online_users:
                    send_response({"message": f"{owner} is online."})
                else:
                    send_response({"message": f"{owner} is offline."})

            elif action == "SEND_MESSAGE":
                recipient = data['recipient']
                if recipient in online_users:
                    message = data['message']
                    recipient_conn = online_users[recipient]
                    recipient_conn.send(json.dumps({"message": f"Message from {username}: {message}"}).encode('utf-8'))
                    send_response({"message": "Message sent!"})
                else:
                    send_response({"message": f"{recipient} is not online."})

            elif action == "BUY_PRODUCT":
                product_name = data['product_name']
                cursor.execute("SELECT * FROM products WHERE name = ? AND buyer IS NULL", (product_name,))
                product = cursor.fetchone()
                if product:
                    cursor.execute("UPDATE products SET buyer = ? WHERE name = ?", (username, product_name))
                    conn_db.commit()
                    send_response({"message": f"Product '{product_name}' bought successfully! Please collect your bought products from the AUB Post Office by next week!"})
                else:
                    send_response({"message": "Product not available."})

            elif action == "ADD_PRODUCT":
                name = data['name']
                description = data['description']
                price = data['price']
                owner = username  # Use the logged-in username as the product owner
                cursor.execute("INSERT INTO products (name, description, price, owner) VALUES (?, ?, ?, ?)",
                               (name, description, price, owner))
                conn_db.commit()
                send_response({"message": "Product added successfully!"})

        except Exception as e:
            print(f"Error: {e}")
            break

    # Cleanup on client disconnect
    if username in online_users:
        del online_users[username]
    conn.close()
    print(f"Connection with {addr} closed.")

def start_server(port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(("127.0.0.1", port))
    server_socket.listen()
    print(f"Server is listening on port {port}")

    while True:
        conn, addr = server_socket.accept()
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python server.py <port>")
        sys.exit(1)

    port_number = int(sys.argv[1])
    start_server(port_number)
